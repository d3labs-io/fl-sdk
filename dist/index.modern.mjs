import{ethers as t}from"ethers";import{Axios as e}from"axios";import s from"form-data";import{Validator as n}from"jsonschema";class a{constructor(t){this.jsonRpcProvider=void 0,this.jsonRpcProvider=t.jsonRpcProvider}async createWallet(){const e=t.Wallet.createRandom();return{address:e.address,privateKey:e.privateKey}}async getTransaction(e){const s=new t.JsonRpcProvider(this.jsonRpcProvider);return await s.getTransaction(e)}async getTransactionReceipt(e){const s=new t.JsonRpcProvider(this.jsonRpcProvider);return await s.getTransactionReceipt(e)}}class i{constructor(t){this.ipfsHttp=void 0,this.ipfsHttp=new e({baseURL:t.ipfsUrl,headers:{Authorization:`Bearer ${t.ipfsToken}`}})}async uploadFile(t){const e=new s;e.append("file",t);const n=await this.ipfsHttp.post("/add",e);if(n.status>=200&&n.status<300==0)throw new Error(`failed, status code: ${n.status}, status text: ${n.statusText}`);return JSON.parse(n.data).cid}async getFile(t){const e=await this.ipfsHttp.get(`/ipfs/${t}`,{responseType:"arraybuffer"});if(e.status>=200&&e.status<300==0)throw new Error(`failed to fetch, status code: ${e.status}, message: ${e.statusText}`);return{fileBuffer:e.data,contentType:e.headers["content-type"]}}}var r=[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"add",type:"address"},{indexed:!1,internalType:"string",name:"symbol",type:"string"}],name:"Created",type:"event"},{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],name:"create",outputs:[],stateMutability:"nonpayable",type:"function"}],o=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"string",name:"uri",type:"string"}],name:"safeMint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"tokenURI",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}];class p{constructor(t){this.jsonRpcProvider=void 0,this.nftFactoryAddress=void 0,this.ipfs=void 0,this.jsonRpcProvider=t.jsonRpcProvider,this.nftFactoryAddress=t.nftFactoryAddress,this.ipfs=new i(t)}async createSmartContract(e,s,n,a){const i=new t.JsonRpcProvider(this.jsonRpcProvider),o=new t.Wallet(e,i),p=new t.Contract(this.nftFactoryAddress,r,o),d=await p.create(s,n);if(a)return{trxHash:d.hash};const c=await d.wait();return{address:c.logs.find(t=>"Created"===t.fragment.name).args[0],trxHash:c.hash}}async mint(e,s,n,a){const i=new t.JsonRpcProvider(this.jsonRpcProvider),r=new t.Wallet(e,i),p=new t.Contract(s,o,r),d=await p.safeMint(r.getAddress(),n);return a?{trxHash:d.hash}:{tokenId:(await d.wait()).logs[0].args[2].toString(),trxHash:d.hash}}async getTokenURI(e,s){const n=new t.JsonRpcProvider(this.jsonRpcProvider),a=new t.Contract(e,o,n);return await a.tokenURI(s)}async generateMetadata(t){const e={name:t.name,description:t.description,timestamp:t.timestamp};if(t.file){const s=await this.ipfs.uploadFile(t.file);e.file=`ipfs://${s}`}const s=Buffer.from(JSON.stringify(e));return`ipfs://${await this.ipfs.uploadFile(s)}`}async getJSONMetadata(t,e){const s=await this.getTokenURI(t,e),{fileBuffer:n}=await this.ipfs.getFile(s.replace("ipfs://",""));return n.toString()}async getTokenFile(t,e){const s=await this.getJSONMetadata(t,e),n=JSON.parse(s);return n.file?await this.ipfs.getFile(n.file.replace("ipfs://","")):null}async checkMetadataSchema(t){const e=new n,s=JSON.parse(t);return e.validate(s,{title:"Token Metadata",type:"object",properties:{name:{type:"string"},description:{type:"string"},timestamp:{type:"number"},file:{type:"string",optional:!0}},required:["name","description","timestamp"],additionalProperties:!1}).valid}}class d{constructor(t){this.nfts=void 0,this.general=void 0,this.ipfs=void 0,this.nfts=new p(t),this.general=new a(t),this.ipfs=new i(t)}}export{d as SeaseedNFTSdk};
