import{ethers as e}from"ethers";class t{constructor(e){this.jsonRpcProvider=void 0,this.jsonRpcProvider=e.jsonRpcProvider}async createWallet(){const t=e.Wallet.createRandom();return{address:t.address,privateKey:t.privateKey}}async getTransaction(t){const n=new e.JsonRpcProvider(this.jsonRpcProvider);return await n.getTransaction(t)}async getTransactionReceipt(t){const n=new e.JsonRpcProvider(this.jsonRpcProvider);return await n.getTransactionReceipt(t)}}var n=[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"add",type:"address"},{indexed:!1,internalType:"string",name:"symbol",type:"string"}],name:"Created",type:"event"},{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],name:"create",outputs:[],stateMutability:"nonpayable",type:"function"}],s=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"string",name:"uri",type:"string"}],name:"safeMint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"tokenURI",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}];class r{constructor(e){this.jsonRpcProvider=void 0,this.nftFactoryAddress=void 0,this.jsonRpcProvider=e.jsonRpcProvider,this.nftFactoryAddress=e.nftFactoryAddress}async createSmartContract(t,s,r,a=!0){const i=new e.JsonRpcProvider(this.jsonRpcProvider),o=new e.Wallet(t,i),d=new e.Contract(this.nftFactoryAddress,n,o),c=await d.create(s,r);if(!a)return c.hash;const p=await c.wait();return{address:p.logs.find(e=>"Created"===e.fragment.name).args[0],trxHash:p.hash}}async mint(t,n,r,a=!0){const i=new e.JsonRpcProvider(this.jsonRpcProvider),o=new e.Wallet(t,i),d=new e.Contract(n,s,o),c=await d.safeMint(o.getAddress(),r);return a?{tokenId:(await c.wait()).logs[0].args[2].toString(),trxHash:c.hash}:c.hash}async getTokenURI(t,n){const r=new e.JsonRpcProvider(this.jsonRpcProvider),a=new e.Contract(t,s,r);return await a.tokenURI(n)}}class a{constructor(e){this.nfts=void 0,this.general=void 0,this.nfts=new r(e),this.general=new t(e)}}export{a as SeaseedNFTSdk};
